import pytest
import pinecone
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from ingest import *
from db import *
from langchain.embeddings.openai import OpenAIEmbeddings
from bson.objectid import ObjectId

@pytest.fixture
def directory():
    directory = "pdf_resources/pdf_test"
    return directory
    
@pytest.fixture
def embeddings():
    embeddings = OpenAIEmbeddings(openai_api_key=os.environ["OPENAI_API_KEY"])
    return embeddings

@pytest.fixture
def index_name():
    index_name = "test4"
    return index_name

@pytest.fixture
def law_area():
    law_area = 'criminal_law'
    return law_area

@pytest.fixture
def index(index_name, embeddings, collection_name):
    index = get_existing_index(index_name, embeddings, collection_name)
    return index

@pytest.fixture
# WARNING: this hard-coded collection id needs to be changed both here and on the frontend
def collection_dict():
    collection_dict = {'_id':ObjectId('6552b0e463c7a4a12cdec1c6'),'name':"Frank's Case"}
    return collection_dict

@pytest.fixture
def fact_sheet_file_path():
    fact_sheet_file_path = "fact_sheet/Jan's Fact Pattern.pdf"
    return fact_sheet_file_path

@pytest.fixture
def fact_sheet_file_name():
    fact_sheet_file_name = "Jan's Fact Pattern.pdf"
    return fact_sheet_file_name

@pytest.mark.skip(reason="skiiiiiiip")
def test_prep_demo(directory, embeddings, index_name, collection_dict, law_area, fact_sheet_file_path, fact_sheet_file_name):
    # Use Frank's case, which is generated by test_db.py
    collection_id = collection_dict['_id']
    collection_name = collection_dict['name']

    # Step 1: insert fact sheet
    fact_sheet_string = pdf_to_string(fact_sheet_file_path)
    fact_sheet_id = insert_new_fact_sheet(collection_id, fact_sheet_file_name, fact_sheet_string)

    # Step 2: Summarize PDFs
    pinecone.init(
        api_key=os.environ["PINECONE_API_KEY"],
        environment="northamerica-northeast1-gcp"
    )

    find = {'_id':collection_id}

    # Call process function
    process_pdfs(directory, embeddings, index_name, collection_name, collection_id, law_area, api_mode=False)

    # Count files that were ingested
    _, _, files = next(os.walk(directory))
    file_count = len(files)

    # Number of summaries
    summary_count = len(collection_col.find_one(find)['case_summary_ids'])

    assert summary_count == file_count
    
    
